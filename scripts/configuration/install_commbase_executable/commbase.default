#!/usr/bin/env bash
################################################################################
#                                   Commbase                                   #
#                                                                              #
# AI Powered Conversational Assistant for Computers and Droids                 #
#                                                                              #
# Change History                                                               #
# 04/29/2023  Esteban Herrera Original code.                                   #
#                           Add new history entries as needed.                 #
#                                                                              #
#                                                                              #
################################################################################
################################################################################
################################################################################
#                                                                              #
#  Copyright (c) 2022-present Esteban Herrera C.                               #
#  stv.herrera@gmail.com                                                       #
#                                                                              #
#  This program is free software; you can redistribute it and/or modify        #
#  it under the terms of the GNU General Public License as published by        #
#  the Free Software Foundation; either version 3 of the License, or           #
#  (at your option) any later version.                                         #
#                                                                              #
#  This program is distributed in the hope that it will be useful,             #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of              #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
#  GNU General Public License for more details.                                #
#                                                                              #
#  You should have received a copy of the GNU General Public License           #
#  along with this program; if not, write to the Free Software                 #
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA   #

# commbase
# It is part of a larger application, likely designed for voice command
# processing and interaction with the Commbase system, involving the starting
# and stopping of servers, clients, and handling various commands and options.

# To start the application:
# shell> commbase start
# Or run it like this:
# shell> ./commbase start
# 
# To run Commbase commands:
# $ commbase 'tell me about yourself'
# Or replace single quotes by double quotes in the parameter.
#
# The command options start, teleport, stop, *), and else don't output logs in
# the pane 1 of the tmux session. The other options output in their respective
# function, otherwise, in their correspondent scripts.

# Prints license
display_license() {

cat <<EOT
Copyright (c) 2022-present Esteban Herrera                                  
stv.herrera@gmail.com                                                       

This program is free software; you can redistribute it and/or modify        
it under the terms of the GNU General Public License as published by        
the Free Software Foundation; either version 3 of the License, or           
(at your option) any later version.                                         

This program is distributed in the hope that it will be useful,             
but WITHOUT ANY WARRANTY; without even the implied warranty of              
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               
GNU General Public License for more details.                                

You should have received a copy of the GNU General Public License           
along with this program; if not, write to the Free Software                 
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA   
EOT
}

# Prints help
display_help() {
    # Imports from libcommbase
    display_control_patterns=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/display_control_patterns.sh

cat <<EOT
Commbase (v0.0.1)

Commands:
Usage: commbase [option]

Print:
  options:
    g, --license       Print the GPL license notification
    h, --help          Print this Help
    V, v, --version    Print software version and exit

Start/Stop:
  options:
    start              Start Commbase
    teleport           Teleport Commbase
    server             Start Commbase server on server host
    client             Launch Commbase client on client host
    stop               Stop Commbase

Record:
  options:
    recorder | rec     Run voice recorder locally

Sound:
  options:
    --toggle-default-capture-device     Toggle the sound capture
    --toggle-capture-on-off             Toggle ON/OFF sound capturing
    --capture-mute                      Stop sound capturing
    --capture-unmute                    Start sound capturing

Language:
  options:
    --set-language     (Interactive) List and set languages available

TTS engine (pyttsx3):
  options:
    --list-pyttsx3-voices               List the commbase-tts-pyttsx3 voices available
    --filter-pyttsx3-english-voices     Filter pyttsx3 English language voices
    --set-pyttsx3-voice-index           Set pyttsx3 TTS engine voice index / Show current voice index

STT engine:
  options:
    --select-stt-engine      (Interactive) List and select STT engines available
    --restart-stt-engine     Shutdown running STT engine and restart it

Shutdown:
  options:
    --stop-commbase        (Interactive) Request user password and stop Commbase
    --reboot-system        (Interactive) Request user password and reboot system
    --power-off-system     (Interactive) Request user password and power off system

Log:
  options:
    --show-chatroom              Display chatroom in apps pane
    --show-log-commands          Display log commands in apps pane
    --show-log-messages          Display log messages in apps pane
    --show-log-chat-log          Display log chat-log in apps pane
    --show-full-commbase-log     Display full Commbase log in apps pane

Control:
  options:
EOT

    # Display the control patterns
    (bash $display_control_patterns)

cat <<EOT

Skill and Skillset:
  options:
    Checkout the User's Guide for a complete list of options
  Examples (Double quotes are optional):
    "Okay, tell me about yourself.":  Run Commbase introduction
    "Okay, start the math test number one zero one.":  Run mentioned multi-choice test interactively
    "Okay, let me know when the internet is back.":  (Interactive) Receive 'event' alert and notification
    "Okay, set a timer of <minutes> minutes.":  Start a countdown timer
        Examples:
            "Okay, set a timer of twenty five minutes."
            Okay, set a timer of one hundred one minutes.

Conversation discourse:
  Misspelled, misspoken, or nonexistent terminal/voice commands are routed to the data exchange server as conversation discourses unless configured otherwise
  Examples:
    commbase --i-misspell-this-command:  Pass mentioned wrong terminal Commbase command as conversation message to data exchange.
    commbase I misspell this command:  Pass mentioned wrong terminal Commbase command as conversation message to data exchange.
    commbase "I misspell this command":  Pass mentioned wrong terminal Commbase command as conversation message to data exchange.
    "Okay, I misspoke this command":  Pass mentioned misspoken voice Commbase command as conversation message to data exchange.
    "Okay, this command doesn't exist":  Pass mentioned inexistent voice Commbase command as conversation message to data exchange.
    "What's the meaning of life?.":  Pass mentioned discourse as conversation message to data exchange.

EOT
}

# Prints version
display_version() {
    echo "Commbase (v0.0.1)";
}

# Routes options
route_option() {
    # Configuration files
    source $COMMBASE_APP_DIR/config/commbase.conf
    source $COMMBASE_APP_DIR/src/app.sh

    # Imports from libcommbase routines
    capture_mute=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/capture_mute.sh
    capture_unmute=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/capture_unmute.sh
    cleanup_directory_by_age=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/cleanup_directory_by_age.sh
    cleanup_directory_by_file_count=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/cleanup_directory_by_file_count.sh
    controller=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/controller.sh
    filter_pyttsx3_voices_by_language=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/filter_pyttsx3_voices_by_language.sh
    list_all_voices_available_for_pyttsx3=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/list_all_voices_available_for_pyttsx3.py
    log_command_with_timestamp=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/log_command_with_timestamp.sh
    log_message_with_timestamp=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/log_message_with_timestamp.sh
    restart_stt_engine=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/restart_stt_engine.sh
    run_voice_recorder_in_pane=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/run_voice_recorder_in_pane.sh
    store_chat_log_copy=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/store_log_copy.sh
    tail_chat_log=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/tail_chat_log.sh
    tail_log_file=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/tail_log_file.sh
    toggle_default_capture_device=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/toggle_default_capture_device.sh
    toggle_capture_on_off=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/toggle_capture_on-off.sh
    update_control_in_messages_json=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/update_control_in_messages_json.sh

    # Imports from libcommbase built-in skills
    terminal_request_user_password_and_execute=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/interactive/terminal_request_user_password_and_execute.sh
    terminal_select_stt_engine=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/interactive/terminal_select_stt_engine.sh
    terminal_set_language=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/interactive/terminal_set_language.sh
    terminal_set_pytts3_voice_index=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/interactive/terminal_set_pytts3_voice_index.sh

    # First tmux session
    SESSIONNAME="Commbase-0";

    terminal_voice_command="$1 ""$2";

    case "$1" in

        'start' | 'teleport' | 'client')
            if (tmux has-session -t "$SESSIONNAME" 2> /dev/null); then
                # Log the command
                (bash "$log_command_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_4" "commbase start" "$COMMBASE_APP_DIR/$LOG_COMMANDS_FILE")

                # echo "Session '$SESSIONNAME' exists.";
                # Output the message and write it to the log file
                (bash "$log_message_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_4" "2" "commbase_session_exist" "False" "$COMMBASE_APP_DIR/$LOG_MESSAGES_FILE")
                (bash "$log_message_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_4" "2" "commbase_session_exist" "True" "$COMMBASE_APP_DIR/$LOG_MESSAGES_FILE")

                # Attach tmux session
                tmux attach-session -t Commbase-0;
            else
                # Clean up the log file
                truncate -s 0 "$COMMBASE_APP_DIR/$LOG_COMMANDS_FILE"
                # Log the command
                (bash "$log_command_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_2" "commbase start" "$COMMBASE_APP_DIR/$LOG_COMMANDS_FILE")

                # Clean up the log file
                truncate -s 0 "$COMMBASE_APP_DIR/$LOG_MESSAGES_FILE"
                # Output the message
                (bash "$log_message_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_2" "2" "starting_application" "False" "$COMMBASE_APP_DIR/$LOG_MESSAGES_FILE")
                # Write the message to the log file
                (bash "$log_message_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_2" "2" "starting_application" "True" "$COMMBASE_APP_DIR/$LOG_MESSAGES_FILE")

                # Start app
                app;
            fi
            ;;
        'server')
            if (tmux has-session -t "$SESSIONNAME" 2> /dev/null); then
                # echo "Session '$SESSIONNAME' exists.";
                # Output the message
                (bash "$log_message_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_4" "2" "commbase_session_exist" "False" "$COMMBASE_APP_DIR/$LOG_MESSAGES_FILE")
                # Write the message to the log file
                (bash "$log_message_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_4" "2" "commbase_session_exist" "True" "$COMMBASE_APP_DIR/$LOG_MESSAGES_FILE")
                tmux attach-session -t Commbase-0;
            else
                # Output the message
                (bash "$log_message_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_2" "2" "starting_application" "False" "$COMMBASE_APP_DIR/$LOG_MESSAGES_FILE")
                # Write the message to the log file
                (bash "$log_message_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_2" "2" "starting_application" "True" "$COMMBASE_APP_DIR/$LOG_MESSAGES_FILE")
                # Give .3 seconds to tmux to draw its content before continuing
                time=0.3;
                # Kill any existent tmux Commbase session in order to avoid duplicates
                tmux kill-session -t Commbase-0;
                # Create a new session, detach from it to continue, and sleep
                tmux new-session -d -t "Commbase" && sleep $time;
                # Activate the conda environment if it exists
                tmux send-keys " conda activate $CONDA_ENV_NAME_IF_EXISTS" C-m && sleep $time;
                # Clean up the command line
                tmux send-keys " clear" C-m;
                # Run commbase-data-exchange server
                tmux select-pane -t 1 && tmux send-keys " $PYTHON_ENV_VERSION $COMMBASE_DATA_EXCHANGE_SERVER_CONNECTION_FILE_PATH" C-m && sleep $time;
                # Enter the Commbase session
                tmux attach-session -t Commbase-0;
            fi
            ;;
        '-g' | '--license')
            display_license | more
            exit 99
            ;;
        '-h' | '--help')
            display_help | less
            exit 99
            ;;
        '-V' | '-v' | '--version')
            display_version
            exit 99
            ;;
    esac

    # Make sure that the tmux session is running
    if (tmux has-session -t "$SESSIONNAME" 2> /dev/null); then
        # echo "Session '$SESSIONNAME' exists." > /dev/null;

        case "$1" in

          'stop')
            # Output the message
            (bash "$log_message_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_2" "2" "stopping_application" "False" "$COMMBASE_APP_DIR/$LOG_MESSAGES_FILE")
            # Write the message to the log file
            (bash "$log_message_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_2" "2" "stopping_application" "True" "$COMMBASE_APP_DIR/$LOG_MESSAGES_FILE")

            # Output the message
            (bash "$log_message_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_2" "2" "saving_conversation_to_user_directory" "False" "$COMMBASE_APP_DIR/$LOG_MESSAGES_FILE")
            # Write the message to the log file
            (bash "$log_message_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_2" "2" "saving_conversation_to_user_directory" "True" "$COMMBASE_APP_DIR/$LOG_MESSAGES_FILE")

            (bash "$store_chat_log_copy" "chat_log_" "txt")

            # Output the message
            (bash "$log_message_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_2" "2" "cleaning_up_directories_and_files" "False" "$COMMBASE_APP_DIR/$LOG_MESSAGES_FILE")
            # Write the message to the log file
            (bash "$log_message_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_2" "2" "cleaning_up_directories_and_files" "True" "$COMMBASE_APP_DIR/$LOG_MESSAGES_FILE")

            # Clean up the conversation files
            (bash "$cleanup_directory_by_file_count" "$MAX_CONVERSATION_FILES_COUNT" "$COMMBASE_APP_DIR"/user/conversation_logs/)
            (bash "$cleanup_directory_by_age" "$MAX_CONVERSATION_FILE_DAYS_STORED" "$COMMBASE_APP_DIR"/user/conversation_logs/)

            # Clean up the current session memory file
            (truncate -s 0 "$COMMBASE_APP_DIR"/"$CHAT_MEMORY_FILE")

            (sleep 2)  # Time in seconds to read messages on pane before the app shutdown

            # Kill the processes of the scripts that do not respond to the
            # interrupt signal or appear to duplicate once the program stops and
            # exits.
            # Gracefully terminate the STT engine PID, and if that fails, use
            # kill -9.
            pkill -f "$STT_ENGINE_PATH"
            #pkill -f python  # This will kill all the running 'python' processes
            conda deactivate  # This is redundant
            tmux kill-session -t Commbase-0
            pkill -f commbase
            exit 99
            ;;
          'recorder' | 'rec')
            # Run the voice recorder for bash locally
            (bash "$run_voice_recorder_in_pane" "7")
            ;;
          '--toggle-default-capture-device')
            # Run the key binding toggle_capture_on-off
            (bash "$toggle_default_capture_device")
            ;;
          '--toggle-capture-on-off')
            # Run the key binding toggle_capture_on-off
            (bash "$toggle_capture_on_off")
            ;;
          '--capture-mute')
            # Run the key binding capture_mute
            (bash "$capture_mute")
            ;;
          '--capture-unmute')
            # Run the key binding capture_unmute
            (bash "$capture_unmute")
            ;;
          '--set-language')
            # Run an interactive terminal only built-in skill to set a language
            (bash "$terminal_set_language")
            ;;
            '--list-pyttsx3-voices')
            # Run nano with the list of voices available for commbase-tts-pyttsx3
            ($PYTHON_ENV_VERSION "$list_all_voices_available_for_pyttsx3")
            ;;
          '--filter-pyttsx3-english-voices')
            # Filter English language voices for commbase-tts-pyttsx3
            (bash "$filter_pyttsx3_voices_by_language" "english")
            ;;
            # Set pyttsx3 TTS engine voice index / Show current voice index
          '--set-pyttsx3-voice-index')
            # Filter English language voices for commbase-tts-pyttsx3
            (bash "$terminal_set_pytts3_voice_index")
            ;;
          '--select-stt-engine')
            # Run an interactive terminal only built-in skill to select an stt engine
            (bash "$terminal_select_stt_engine")
            ;;
          '--restart-stt-engine')
            # Shutdown running STT engine and restart it
            (bash "$restart_stt_engine")
            ;;
          '--stop-commbase')
            # Interactively request the user password and stop Commbase
            (bash "$terminal_request_user_password_and_execute" "commbase" "stop")
            ;;
          '--reboot-system')
            # Interactively request the user password and reboot the system
            (bash "$terminal_request_user_password_and_execute" "$INIT_SYSTEM_COMMAND" "reboot")
            ;;
          '--power-off-system')
            # Interactively request the user password and power off the system
            (bash "$terminal_request_user_password_and_execute" "$INIT_SYSTEM_COMMAND" "poweroff")
            ;;
          '--show-chatroom')
            # Display chatroom in apps pane
            (tmux select-window -t 1 && tmux select-pane -t 1 && tmux send-keys C-c);  # Sends Ctrl-c
            (tmux select-window -t 1 && tmux select-pane -t 1 && tmux send-keys " clear; bash $tail_chat_log" C-m && sleep "$time");
            (tmux select-window -t 1 && tmux select-pane -t 7 && tmux send-keys " clear" C-m);
            ;;
          '--show-log-commands')
            # Display log commands in apps pane
            (tmux select-window -t 1 && tmux select-pane -t 1 && tmux send-keys C-c);  # Sends Ctrl-c
            (tmux select-window -t 1 && tmux select-pane -t 1 && tmux send-keys " clear; bash $tail_log_file $LOG_COMMANDS_FILE" C-m && sleep "$time");
            (tmux select-window -t 1 && tmux select-pane -t 7 && tmux send-keys " clear" C-m);
            ;;
          '--show-log-messages')
            # Display log messages in apps pane
            (tmux select-window -t 1 && tmux select-pane -t 1 && tmux send-keys C-c);  # Sends Ctrl-c
            (tmux select-window -t 1 && tmux select-pane -t 1 && tmux send-keys " clear; bash $tail_log_file $LOG_MESSAGES_FILE" C-m && sleep "$time");
            (tmux select-window -t 1 && tmux select-pane -t 7 && tmux send-keys " clear" C-m);
            ;;
          '--show-log-chat-log')
            # Display log chat-log in apps pane
            (tmux select-window -t 1 && tmux select-pane -t 1 && tmux send-keys C-c);  # Sends Ctrl-c
            (tmux select-window -t 1 && tmux select-pane -t 1 && tmux send-keys " clear; bash $tail_log_file $CHAT_LOG_FILE" C-m && sleep "$time");
            (tmux select-window -t 1 && tmux select-pane -t 7 && tmux send-keys " clear" C-m);
            ;;

        esac

        case "$terminal_voice_command" in

          'Okay, stop.' | 'Ok, stop.' | 'Okay, stop!' | 'Ok, stop!')
            cd "$COMMBASE_APP_DIR"/data || exit
            # Path to the JSON file
            json_file=".messages.json"
            # Update the "control" value in the JSON file
            (bash "$update_control_in_messages_json" stop_previous_command)
            ;;
          *)
            cd "$COMMBASE_APP_DIR"/data || exit
            # Your input parameters
            param1="$1"
            param2="$2"
            param3="$3"
            param4="$4"
            param5="$5"
            param6="$6"
            param7="$7"
            param8="$8"
            param9="$9"
            # Set the file path
            json_file=".messages.json"
            # Create a JSON object with the desired structure
            json_content='{"messages": [{"language": "'"$COMMBASE_LANG"'"},{"control": ""}, {"current_request": "'"$param1 $param2 $param3 $param4 $param5 $param6 $param7 $param8 $param9"'"}, {"previous_request": "'"$param1 $param2 $param3 $param4 $param5 $param6 $param7 $param8 $param9"'"}, {"current_response": ""}, {"runtime": ""}, {"source_code_display": ""}, {"source_code": ""}]}'
            cleaned_current_request=$(echo "$json_content" | jq -c '.messages[] |= if has("current_request") then .current_request |= sub("^ +| +$";"") else . end')
            cleaned_previous_request=$(echo "$cleaned_current_request" | jq -c '.messages[] |= if has("previous_request") then .previous_request |= sub("^ +| +$";"") else . end')
            cleaned_json=$cleaned_previous_request
            # Write the JSON object to the file
            echo "$cleaned_json" > "$json_file"
            # Send the messages request to the controller for parsing
            (bash "$controller")
            ;;
        esac

    else
        # Output the message
        (bash "$log_message_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_2" "2" "commbase_session_does_not_exist" "False" "$COMMBASE_APP_DIR/$LOG_MESSAGES_FILE")
        # Write the message to the log file
        (bash "$log_message_with_timestamp" "commbase" "$LOG_SEVERITY_LEVEL_2" "2" "commbase_session_does_not_exist" "True" "$COMMBASE_APP_DIR/$LOG_MESSAGES_FILE")
    fi
}

main() {
route_option $1 $2 $3 $4 $5 $6 $7 $8 $9;
}

main $1 $2 $3 $4 $5 $6 $7 $8 $9;

exit 99
