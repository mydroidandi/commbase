#!/usr/bin/env bash
################################################################################
#                                   Commbase                                   #
#                                                                              #
# AI Powered Conversational Assistant for Computers and Droids                 #
#                                                                              #
# Change History                                                               #
# 04/29/2023  Esteban Herrera Original code.                                   #
#                           Add new history entries as needed.                 #
#                                                                              #
#                                                                              #
################################################################################
################################################################################
################################################################################
#                                                                              #
#  Copyright (c) 2022-present Esteban Herrera C.                               #
#  stv.herrera@gmail.com                                                       #
#                                                                              #
#  This program is free software; you can redistribute it and/or modify        #
#  it under the terms of the GNU General Public License as published by        #
#  the Free Software Foundation; either version 3 of the License, or           #
#  (at your option) any later version.                                         #
#                                                                              #
#  This program is distributed in the hope that it will be useful,             #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of              #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
#  GNU General Public License for more details.                                #
#                                                                              #
#  You should have received a copy of the GNU General Public License           #
#  along with this program; if not, write to the Free Software                 #
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA   #

# commbase
# It is part of a larger application, likely designed for voice command
# processing and interaction with the Commbase system, involving the starting
# and stopping of servers, clients, and handling various commands and options.

# To start the application:
# shell> commbase start
# Or run it like this:
# shell> ./commbase start
# 
# To run Commbase commands:
# $ commbase 'tell me about yourself'
# Or replace single quotes by double quotes in the parameter.
#
# The command options start, teleport, stop, *), and else don't output logs in
# the pane 1 of the tmux session. The other options output in their respective
# function, otherwise, in their correspondent scripts.

# Prints license
display_license() {

cat <<EOT
Copyright (c) 2022-present Esteban Herrera                                  
stv.herrera@gmail.com                                                       

This program is free software; you can redistribute it and/or modify        
it under the terms of the GNU General Public License as published by        
the Free Software Foundation; either version 3 of the License, or           
(at your option) any later version.                                         

This program is distributed in the hope that it will be useful,             
but WITHOUT ANY WARRANTY; without even the implied warranty of              
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               
GNU General Public License for more details.                                

You should have received a copy of the GNU General Public License           
along with this program; if not, write to the Free Software                 
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA   
EOT
}

# Prints help
display_help() {
    # Imports from libcommbase
    display_control_patterns=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/display_control_patterns.sh

cat <<EOT
Commbase (v0.0.1)

Print:
  Syntax: commbase [-g|h|V]
  options:
    g, --license       Print the GPL license notification
    h, --help          Print this Help
    V, v, --version    Print software version and exit

Start/Stop:
  Usage: commbase [options]
  options:
    start              Start Commbase
    teleport           Teleport Commbase
    server             Start Commbase server on a server host
    client             Launch Commbase client on a client host
    stop               Stop Commbase

Control:
  Usage: commbase [options]
  options:
EOT

    # Display the control patterns file
    (bash $display_control_patterns)

cat <<EOT

Skills and Skillsets:
  Usage: commbase [options]
  options:
    Checkout the User's Guide for a complete list of options
  Examples:
    "Tell me about yourself.":  Run Commbase introduction
    "Start the math test number one zero one.":  Run the mentioned multi-choice test interactively
    "Let me know when the internet is back.":  Receive the 'event' alert and notification
    "Set a timer of <minutes> minutes.":  Start a countdown timer
        Examples:
            "Set a timer of twenty five minutes."
            Set a timer of one hundred one minutes.

**Double quotes are optional
EOT
}

# Prints version
display_version() {
    echo "Commbase (v0.0.1)";
}

# Routes options
route_option() {
    # Imports
    source $COMMBASE_APP_DIR/config/commbase.conf
    source $COMMBASE_APP_DIR/src/app.sh

    # Imports from libcommbase
    update_control_in_messages_json=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/update_control_in_messages_json.sh
    controller=$COMMBASE_APP_DIR/bundles/libcommbase/libcommbase/routines/controller.sh

    # First tmux session
    SESSIONNAME="Commbase-0";

    terminal_voice_command="$1 ""$2";

    case "$1" in

        'start' | 'teleport' | 'client')
            if (tmux has-session -t "$SESSIONNAME" 2> /dev/null); then
                echo "Session '$SESSIONNAME' exists.";
                tmux attach-session -t Commbase-0;
            else
                echo "Starting application";
                app;
            fi
            ;;
        'server')
            if (tmux has-session -t "$SESSIONNAME" 2> /dev/null); then
                echo "Session '$SESSIONNAME' exists.";
                tmux attach-session -t Commbase-0;
            else
                echo "Starting application";
                # Give .3 seconds to tmux to draw its content before continuing
                time=0.3;
                # Kill any existent tmux Commbase session in order to avoid duplicates
                tmux kill-session -t Commbase-0;
                # Create a new session, detach from it to continue, and sleep
                tmux new-session -d -t "Commbase" && sleep $time;
                # Activate the conda environment if it exists
                tmux send-keys " conda activate $CONDA_ENV_NAME_IF_EXISTS" C-m && sleep $time;
                # Clean up the command line
                tmux send-keys " clear" C-m;
                # Run commbase-data-exchange server
                tmux select-pane -t 1 && tmux send-keys " $PYTHON_ENV_VERSION $COMMBASE_DATA_EXCHANGE_SERVER_CONNECTION_FILE_PATH" C-m && sleep $time;
                # Enter the Commbase session
                tmux attach-session -t Commbase-0;
            fi
            ;;
        '-g' | '--license')
            display_license | more
            exit 99
            ;;
        '-h' | '--help')
            display_help | less
            exit 99
            ;;
        '-V' | '-v' | '--version')
            display_version
            exit 99
            ;;
    esac

    # Make sure that the tmux session is running
    if (tmux has-session -t "$SESSIONNAME" 2> /dev/null); then
        echo "Session '$SESSIONNAME' exists." > /dev/null;

        case "$1" in

          'stop')
            echo "Stopping application"
            sleep 1
            # In this block, "pkill -f" the processes of the scripts that do not
            # respond to the interrupt signal or appear to duplicate once the
            # program stops and exits.
            pkill -f $STT_ENGINE_PATH
            #pkill -f python  # This will kill all the running 'python' processes
            conda deactivate  # This is redundant
            tmux kill-session -t Commbase-0
            pkill -f commbase
            exit 99
            ;;
        esac

        case "$terminal_voice_command" in

          'Okay stop.' | 'Ok stop.')
            cd "$COMMBASE_APP_DIR"/data || exit
            # Path to the JSON file
            json_file=".messages.json"
            # Update the "control" value in the JSON file
            (bash "$update_control_in_messages_json" stop_previous_command)
            ;;
          *)
            cd "$COMMBASE_APP_DIR"/data || exit
            # Your input parameters
            param1="$1"
            param2="$2"
            param3="$3"
            param4="$4"
            param5="$5"
            param6="$6"
            param7="$7"
            param8="$8"
            param9="$9"
            # Set the file path
            json_file=".messages.json"
            # Create a JSON object with the desired structure
            json_content='{"messages": [{"control": ""}, {"current_request": "'"$param1 $param2 $param3 $param4 $param5 $param6 $param7 $param8 $param9"'"}, {"previous_request": "'"$param1 $param2 $param3 $param4 $param5 $param6 $param7 $param8 $param9"'"}, {"current_response": ""}, {"runtime": ""}, {"source_code_display": ""}, {"source_code": ""}]}'
            cleaned_current_request=$(echo "$json_content" | jq -c '.messages[] |= if has("current_request") then .current_request |= sub("^ +| +$";"") else . end')
            cleaned_previous_request=$(echo "$cleaned_current_request" | jq -c '.messages[] |= if has("previous_request") then .previous_request |= sub("^ +| +$";"") else . end')
            cleaned_json=$cleaned_previous_request
            # Write the JSON object to the file
            echo "$cleaned_json" > "$json_file"
            # Send the messages request to the controller for parsing
            (bash "$controller")
            ;;
        esac

    else
        echo "Session '$SESSIONNAME' does not exists. Usage: /usr/bin/commbase [start|stop]";
    fi
}

main() {
route_option $1 $2 $3 $4 $5 $6 $7 $8 $9;
}

main $1 $2 $3 $4 $5 $6 $7 $8 $9;

exit 99
