Content
========

1. Installation

1.1. Set up your system repository sources

1.2. Update the system

1.3. Install Commbase

1.4. Set up your new app name and directory

1.5. Set up the HISTCONTROL environment variable

1.6. Set up the Commbase executable

2. Requisites and dependencies

2.1. Decide which Python version to install

2.2. Install Python

2.3. Install Python packages

2.4. Install Python in an Anaconda Python environment

2.5. Build the Commbase Conda environment from a YAML file

2.6. Install the required system dependency packages

2.7. Install commbase-stt-vosk-p

2.8. Install libcommbase

2.9. Install the Vosk model

2.10. Install VU-meter

2.11. Install Oh My Tmux

2.12. Install the default Commbase voice commands dependencies

2.13. Install Desktop Environments

3. Next steps

4. CPU Limit


1. Installation
================

In this document, we will use Debian GNU/Linux to demonstrate the installation steps, but you can use any of your preferred distros and have the same result.

Set up your system repository sources
--------------------------------------

Add the sources contrib and non-free in the file /etc/apt/sources

$ sudo nano /etc/apt/sources

Update the system
------------------

$ sudo apt-get update

You can also upgrade it like this:

$ sudo apt-get -u upgrade

Install Commbase
-----------------

Visit: https://github.com/mydroidandi/commbase

Download or clone the repository somewhere in your home directory:

$ echo $HOME

$ cd $HOME

Extract the zip file:

$ unzip commbase-main.zip

Set up your new app name and directory
---------------------------------------

Go to the directory scripts/configuration/ 

You will see the file set_app_root_directory_and_app_directory.sh there.

$ bash set_app_root_directory_and_app_directory.sh

The script prompts the user to enter the current location and name of the directory they want to rename, and also to enter a new name and location for the directory. It also appends the variable COMMBASE_APP_DIR in the files $HOME/.bashrc and $HOME/.zshrc

Notes about the difference between .bashrc and .bash_profile:

.bash_profile is read and executed when Bash is invoked as an interactive login shell, while .bashrc is executed as an interactive non-login shell.

When Bash is invoked as an interactive non-login shell, it reads and executes commands from ~/.bashrc, if that file exists, and is readable.

When invoked as an interactive login shell, Bash looks for the /etc/profile file, and if the file exists , it runs the commands listed in the file. Then Bash searches for ~/.bash_profile, ~/.bash_login, and ~/.profile files, in the listed order, and executes commands from the first readable file found.

In case of that your OS distribution does not use ~/.bashrc, add manually the variable $COMMBASE_APP_DIR and its value to your Bash Startup File(s).

Set up the HISTCONTROL environment variable
--------------------------------------------

The HISTCONTROL variable determines which commands are saved in the history file. If you set it to the value "ignoreboth", any command preceded by a space character will be excluded from the history.

Commbase uses HISTCONTROL to keep clean the commands' history during the rendering of the Commbase UI.

To set up the HISTCONTROL environment variable, run the script scripts/configuration/append_function_no_history_to_bashrc.sh:

$ cd scripts/configuration

$ sudo bash append_function_no_history_to_bashrc.sh

$ source append_function_no_history_to_bashrc.sh

$ exit

Reopen the terminal.

Note: Do not confuse this history file .bash_history with the file .app_history that is mentioned in the document User's Guide.

Set up the Commbase executable
-------------------------------

Go to the directory scripts/configuration/install_commbase_executable/ and execute the file install_commbase_executable.sh:

$ cd scripts/configuration/install_commbase_executable/

$ bash install_commbase_executable.sh

A new commbase file should appear in the directory /usr/bin.

$ ls /usr/bin/commbase

Do not run the commbase command yet. Remember that the command commbase opens an enhanced tmux session named Commbase-0. To avoid duplicate instances of Commbase running on the system, you need to completely close the program before rerunning it once more. Check out the User's Guide for more details regarding this topic.


2. Requisites and dependencies
===============================

Decide which Python version to install
---------------------------------------

In the next documentation sections, we present 3 alternatives to install the Commbase Python Environment:

1. Install Python, Install Python packages.

2. Install Python in an Anaconda Python environment.

3. Build the Commbase Conda environment from a YAML file.

From those alternatives, we recommend installing Python using the third option, Build the Commbase Conda environment from a YAML file, because of the following advantages:

1. Some Anaconda Python packages are optimized for AI (Machine Learning and Data Science.)

2. There is no need to manually create a new Commbase environment, in case of systems with multiple environments setups.

3. You recreate and install the Commbase environment, packages, and packaging dependencies all at once.

4. You do not need to edit the file config/app.conf constant PYTHON_ENV_VERSION="python" to define your own or custom Python version that Commbase is going to use.

5. You can finish the Python process when it does not respond to the interrupt signal or appears to duplicate, much better than you do with a single Python installation. The reason is that depending on your Python installation, all the applications running with Python end up linked to a single Python process, "python"; if you kill it, you kill all the applications. By deactivating a Python virtual environment like the Anaconda Python environment, you kill only the "python" process and its children without touching any other Python program outside the environment. In the section "Set up the Commbase executable" in thsi document you install the commbase executable in /usr/bin/. If you are not going to run Commbase inside a virtual environment and require killing Python or any other runtime when Commbase stops, edit the file with your favorite text editor. Youca use a command like:

$ sudo nano /usr/bin/commbase

Specifically for Python, the line to kill Python inside the case to stop the application would look like this:

		    pkill -f python  # This will kill all the running 'python' processes

In case you do not have Anaconda Python in your system but still want to use it to run Commbase, you can install Anaconda Python and then read the section "Install Python in an Anaconda Python environment" to choose if you are going to create any Anaconda Python Commbase environment such as "commbase_env" yourself or build it later on as it is shown in the section "Build the Commbase Conda environment a from YAML file".

The installation of Anaconda Python is beyond the scope of this documentation. For information on how to install Anaconda Python in your operating system, visit:

https://docs.anaconda.com/free/anaconda/getting-started/install/

After its installation, your Anaconda Python version should be capable of installing or building your commbase_env environment. Otherwise, try to install a newer or older version of Anaconda Python and verify the Python versions it can install, run, and work with.

In case you want to use your systems' or any custom Python version, edit the file config/app.conf line with the variable PYTHON_ENV_VERSION="python"

For example:

PYTHON_ENV_VERSION="python3.11"

In that way, Commbase will attempt to run using python3.11 from your OS instead of using the Anaconda Python environment commbase_env, which has and runs its own Python version.

Python 3.11 is the minimum Python version required to run all the Commbase software properly, in the system or in a virtual environment. A Python version higher than the one used in commbase_env could affect any skill script or any custom scripts you could make. In such cases, you could keep your custom Python version or Python environment version and manage the errors by yourself.

Install Python
---------------

In this section, we added an excellent alternative to standard Python installations. However, the method to install Python is your decision at the end of the day, and that choice is not going to affect how Commbase works. After the alternative "Build Python 3.11.1 on Debian 11 Bullseye", we put a subsection "Install Python 3.7" just for reference of installations of older Python versions.

- Build Python 3.11.1 on Debian 11 Bullseye:

Check the current version:

$ apt info python3

Info: https://www.python.org/downloads/release/python-3111/

Download and extract the Python source code:

$ cd /tmp/

$ wget https://www.python.org/ftp/python/3.11.1/Python-3.11.1.tgz

$ tar -xzvf Python-3.11.1.tgz

$ cd Python-3.11.1/

Install the build tools:

$ sudo apt update

$ sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev

If you are prompted to install other dependencies, select yes.

Configure, make and make install:

$ ./configure --enable-optimizations

Run make. You can make the build using nproc, which returns the number of CPUs.

$ make -j `nproc`

Make install.

The default Python installation is /usr/bin. If you want to install Python under /usr/local/bin instead of overwriting the default, do this:

$ sudo make altinstall

This will install Python at /usr/local/bin/python3.11. To test the version, run this:

$ python3.11 -V

You will get this output:

Python 3.11.1

Make Python 3.11.1 the default version.

To make the default version of Python 3.11.1, run this:

$ sudo ln -s /usr/local/bin/python

Output:

ln: failed to create symbolic link './python': File exists

$ sudo ln -s /usr/local/bin/python3.11 /usr/local/bin/python

This creates a bunch of softlinks and links the latest Python to /usr/local/bin.

Test whether Python 3.11.1 is the default version:

$ ls -al /usr/local/bin/python

Output:

lrwxrwxrwx 1 root root 25 May 11 16:52 /usr/local/bin/python -> /usr/local/bin/python3.11

$ ls -al /etc/alternatives/python

Output:

ls: cannot access '/etc/alternatives/python': No such file or directory

$ /usr/local/bin/python3.11 -V

Output:

Python 3.11.1

$ python -V

The output will be:

Python 3.11.1

So, at this point, Python 3.11.1 has been set as the default version of Python.

Verify the pip version:

$ pip -V

Output:

[...] (python 3.9)

Upgrade the pip version:

$ whereis python

$ /usr/local/bin/python3.11 -m pip install --upgrade pip

$ pip3.11 install --upgrade pip

$  whereis pip

Check the new pip version:

$ pip3.11 -V

Output:

pip: /usr/bin/pip /usr/local/bin/pip3.11 /usr/share/man/man1/pip.1.gz

From now on, you can use this new command pip3.11 to install most of your pip packages.

- Install Python 3.7:

$ sudo apt-get update

$ apt-cache search python 3.7

$ sudo apt-get install python3.7

pip3.7:

$ /usr/bin/python3 -m pip install --upgrade pip

$ /usr/bin/python3 -m pip3 install --upgrade pip

$ /usr/bin/python3.7 -m pip3.7 install --upgrade pip

Prints a list of installed pip packages:

$ pip list | more

$ pip3 list | more

$ pip3.7 list | more

Install many pip versions will allow you to choose a package version using the pip version. For example:

$ pip install subprocess.run

Or:

$ pip3 install subprocess.run

Install Python packages
------------------------

- Vosk:

$ pip3.11 install vosk

Or use:

$ python -m pip install vosk

If you can't install it, check the output messages. For example, I have Vosk already in the system from a previous Kdenlive application installation (installed as a flatpak from flathub), which does not allow me to re-install Vosk.

Example of terminal OUTPUT:

Defaulting to user installation because normal site-packages is not writable
Requirement already satisfied: vosk in /home/<USER>/.local/lib/python3.7/site-packages (0.3.22)

End of OUTPUT.

In the previous output, the messages references the current Python Vosk package installation. Python is already installed in a directory of the current local user <USER>, instead of system-wide, so it is helpful to re-install python3, pip3, or vosk.

- Portaudio:

PyAudio‑0.2.13 requires Portaudio19 to install:

More information here: https://packages.debian.org/bullseye/portaudio19-dev

$ sudo apt-get update

$ apt-cache search portaudio

$ sudo apt-get install portaudio19-dev portaudio19-doc

- PyAudio‑0.2.13:

$ pip3.11 install PyAudio

- Subprocess.run:

More information here: https://pypi.org/project/subprocess.run/

$ pip3.11 install subprocess.run

- Sounddevice:

This package allows us to run test_microphone.py

$ pip3.11 install sounddevice

- Chardet:

$ pip3.11 install chardet

- Scikit-learn and scikit-learn-intelex:

$ pip3.11 install scikit-learn scikit-learn-intelex

- OpenCV:

It must be installed as Python package and also as a system package.

To install the Python OpenCV package:

$ pip3.11 install opencv-python

Steps to install OpenCV in Debian 11:

Verify the current Debian version (The version limits the higher version that you can install of any package name):

$ cat /etc/issue

Verify the current Python version:

$ python -V

Update the sources list for the official Debian repos:

$ sudo apt-get update

Search the package in the official Debian repos (main):

apt-cache search opencv

Show the package version information:

$ apt-cache show python3-opencv

Install the package:

$ sudo apt-get install python3-opencv

Verify the packge installation:

$ dpkg -l | grep opencv

- openai

$ pip3.11 install openai

- aiohttp-cors

$ pip3.11 install aiohttp-cors

- typer

$ pip3.11 install typer

- rich

pip3.11 install rich

- cchardet

This is giving an error and was installed using pip3 instead of pip3.11, as follows:

$ pip3 install cchardet

Install Python in an Anaconda Python environment
-------------------------------------------------

Alternatively, you can replace Python 3.11 with Anaconda Python. Anaconda Python includes some well-optimized Python packages, so the speech recognition AI is supposed to work faster with Anaconda Python than with the official running Python, but everything depends on many factors, such as package versions and system resource availability.

More information on Anaconda: https://www.anaconda.com/

After the installation of Anaconda Python, you should see the string "(base)" in the foobar.

In case your system has a single Python installation using Anaconda Python if it is set up for running only in the Bash shell, you must enter the Bash shell before starting Commbase, starting anaconda-navigator, or starting any other Python script/program incapable of starting with the current Python's runtime that is preinstalled within your Operating System distribution:

Example of foobar before entering Bash:

USER-NAME@HOSTNAME:~$ bash

Example of foobar with Anaconda Python, identified by the string "(base)", after entering Bash:

(base) USER-NAME@shark:~$

To install PyPi-like packages in the (base) in Anaconda Python, use the command "conda":

(base) USER-NAME@HOSTNAME:~$ conda install PACKAGE-NAME

If you want to create a new Anaconda Python (3.11) environment just for Commbase, you can use the default name commbase_env or customize it in the configuration file config/app.conf:

CONDA_ENV_NAME_IF_EXISTS="commbase_env"

To create the environment using the default name commbase_env do:

$ conda create -n commbase_env python=3.11

$ conda activate commbase_env

Now, (commbase_env) appears in the foobar.

Within the Anaconda Python environment "commbase_env" you can install Conda packages, instead of, for example, pip packages. Examples:

Install OpenCV version 4.6.0 whether available from the defaults channel to a particular Anaconda Python environment:

(commbase_env) $ conda install -c defaults opencv=4.6.0

Install the latest version of OpenCV, available from the conda-forge channel:

(commbase_env) $ conda conda-forge -c defaults opencv

Alternatively, to install PyPi-like packages in the (commbase_env) environment in Anaconda Python, use the command "pip", for example:

(commbase_env) $ pip install ipython

To verify the package was installed, in your terminal window or an Anaconda Python prompt, run:

(commbase_env) $ conda list

Note: This documentation and Commbase code would be updated for future releases of Python to make everything Commbase compatible.

To deactivate the current environment and go back to (base) use:

(commbase_env) $ conda deactivate

To deactivate any environment, use "deactivate" from another environment:

(base) $ conda deactivate commbase_env

$ conda deactivate base

Verify the Anaconda Python's Python version used:

(base) $ python --version

As stated, some Anaconda Python packages are usually performing better than the packages for the OS distribution, that is the case of OpenCV. You can test and compare the performance between the OS distribution Python version and the Anaconda Python environment version, by running the file resizable-camera-capture.py from every separate environment. The file does not have to include the Python version to be used in the first line of the script to be executed using the Python version in/specified in the command line:

In the system environment, specifying to use Python3.11:

$ cd /path/to/my/commbase/app

$ python3.11 src/default/broker/skill_scripts/python/c/computer_vision/resizable_camera_capture/skill_script_resizable_camera_capture.py

In the Anaconda Python commbase_env environment, using the environment's Python version:

(commbase_env) $ python src/default/broker/skill_scripts/python/c/computer_vision/resizable_camera_capture/skill_script_resizable_camera_capture.py

Build the Commbase Conda environment from a YAML file
------------------------------------------------------

Using YAML files is the simplest and probably the best way to install Python and the Python Commbase environment dependencies.
To simplify it even more, we put all together in a script you can run once.

If you want to remove a previous Commbase environment, if the environment you want to remove is the current active environment, deactivate it before running the script.

(commbase_env) $ conda deactivate

Run the config script:

$ bash scripts/configuration/build_conda_environment.sh

The script will remove any existent environment called commbase_env, recreate it and install it from the beginning using the file commbase_env.yaml in one step.

Install the required system dependency packages
------------------------------------------------

The names of the packages or the names of the commands mentioned in this section could change from OS distribution to distribution, or even from release to release.

In Debian, the DPKG packages that contain all the required commands can be installed using APT. APT manages and installs the package dependencies automatically.

List of required packages/commands:

- alsa-utils (contains the tools: alsamixer and aplay)

- bash

- cpulimit

- curl

- dash (contains the sh command) 

- espeak (alternative to festival)

- festival

- ffmpeg

- gawk

- gdebi

- git

- mpv

- mplayer

- nmap

- openssh-server (server and client)

- pkill (it comes installed with the base system sometimes, in a package with another name)

- portaudio19-dev (seen in the section of PyAudio)

- python3-opencv (seen in the installation of OpenCV)

- rsync

- sed

- sox (includes the command play)

- sudo

- tar (seen in the section of PyAudio)

- tasksel

- tmux

- unzip

- uuid-runtime

- wget

Use APT to install packages from the official repositories for your distro, like this:

$ sudo apt-get install <PACKAGE-NAME> <PACKAGE-NAME2> <PACKAGE-NAM3> <...>

For example, this is the actual one-liner command someone could require:

$ sudo apt-get update; sudo apt-get install alsa-utils bash cpulimit curl dash festival ffmpeg gawk gdebi git mpv mplayer nmap openssh-server portaudio19-dev python3-opencv rsync sed sox sudo tar tasksel tmux unzip uuid-runtime wget

Troubleshooting the package installation:

Packages unfound by their given names can be replaced in the source by their respective command line versions for your favorite OS distribution.

To verify that the command of a package is already in the system, type in the command and then press enter. For example:

$ awk

If you can list the command, it means that the application is installed.

If you want to know which alternative is currently set in case of meta-packages with more than one alternative, for example, awk:

$ update-alternatives --list awk

To change the alternative, use:

$ update-alternatives --config awk

Package Names and commands should be verified after the Commbase installation, during the Commbase configuration. To verify packages, you can use:

$ whereis <PACKAGE>

$ whereis <COMMAND>.

To verify that a package is present in the system:

$ dpkg -l | grep <PACKAGE-NAME>

Example:

$ dpkg -l | grep bash

To search for a particular package name or string in the official Debian repositories, considering that config file /etc/apt/sources.list includes the repositories "main", "contrib", and "non-free", use apt-cache, for example:

$ apt-cache search dash | grep "dash"

Install commbase-stt-vosk-p
----------------------------

This code repository comes bundled with the Commbase code, but can also download it.

Download/clone it from GitHub and install it:

$ cd bundles/built-in/broker

$ git clone git@github.com:mydroidandi/commbase-stt-vosk-p.git

$ cd commbase-stt-vosk-p

If you need to remove the .git directory:

$ rm -rf .git

You could need to change the first line of the file commbase_stt_vosk_p.py, to a fixed Python version, accordingly:

For Anaconda Python environments, use:

#!/usr/bin/env python

For Python3.11, use:

#!/usr/bin/python3.11

Install libcommbase
--------------------

This code repository comes bundled with the Commbase code, but can also download it.

$ cd bundles/built-in/broker

$ git clone git@github.com:mydroidandi/libcommbase.git

$ cd libcommbase

If you need to remove the .git directory:

$ rm -rf .git

Install the Vosk model
-----------------------

Currently, Commbase works only in English.

Visit: https://alphacephei.com/vosk/models

Download and install the model manually or by running this command in commbase/scripts/configuration:

$ bash install_vosk_model.sh

Note: You can download and use a newer model version or a more accurate model with a bigger size, but it could/would affect the Commbase voice recognition precision and/or the system performance because the bigger the model you use, the bigger the memory required to load it and the bigger the cpu core usage (uses a single core). That change would make you verify all the voice commands to make sure that the voice recognition matches your commands.

Note: If you are patient, you can change all the text patterns and code to make your Commbase app work in one of the languages supported by Vosk, but we do not recommend you to do so unless you need to, because it is a huge task.

Install VU-meter
-----------------

This code repository comes bundled with the Commbase code, but can also download it.

$ cd bundles/built-in/broker

$ git clone https://github.com/kmein/vu-meter.git

$ vu_meter 

If you need to remove the .git directory:

$ rm -rf .git

You could need to change the first line of the file vu_meter.py, to a fixed Python version, accordingly:

For Anaconda Python environments, use:

#!/usr/bin/env python

For Python3.11, use:

#!/usr/bin/python3.11

Install Oh My Tmux
-------------------

Download/clone it from GitHub and install it:

$ cd

$ git clone https://github.com/gpakosz/.tmux.git

$ ln -s -f .tmux/.tmux.conf

$ cp .tmux/.tmux.conf.local .

Install the default Commbase voice commands dependencies
---------------------------------------------------------

The applications to run by voice commands can be replaced at any moment and grow by users (skill programmers and skillset trainers). For example, replace VS Code by Gedit, Vim, etc. However, have installed these as a minimum to be able to run the Commbase commands available in the "sample skills" installation:

- Brave browser

- Etherape

- Gnome terminal

- Midori

- Nano

- Neofetch

- ProtonVPN

- VS Code

Install Desktop Environments
-----------------------------

Install a Desktop Environment such as Cinnamon, which can save you some time installing applications automatically. However, you need free space on the disk to do so, so its complete installation is not recommended on IoTs with low hard drive space available.

Check free space like this:

$ df -h

To install/Remove Desktop Environments:

$ sudo tasksel


3. Next steps
==============

If everything went well, now you can run the next command in a terminal to start the program:

$ commbase start

At this point, Commbase will be ready to receive Commbase voice commands and Commbase terminal commands to assist you. However, the only command that works is "tell me about yourself".

Verify that the microphone is open and tell Commbase to introduce himself/herself.

Say: "tell me about yourself"

Optionally, type the command in the terminal:

$ commbase "tell me about yourself"

The output should be the Commbase introduction, which means that the "demo skills" are already installed.

From here, you should decide to start programming new "custom skills" from an initial Commbase installation with "demo skills" or proceed to use the "sample skills", before programming new "custom skills" for Commbase.

You can program new custom skills to customize your voice assistant or to create J.A.R.V.I.S. from Iron Man.

Check out the document User's Guide in the directory docs/ for a complete list of options.


4. CPU limit
=============

Running Commbase can over stress the Central Process Unit (CPU) depending on your CPU and hardware.

You can verify the Commbase performance on your computer in many ways, for example, run top and verify the Python process row:

$ top

Press 'q' to exit.

If you experience problems with the engine commbase_stt_vosk_p performance when running Commbase, you can yet change the value of the variable STT_PROCESS_CPU_LIMIT_PERCENTAGE in the file config/app.conf to a higher value. Usually 1 - 100, but can be higher than 400 on multicore CPUs.

Considerations on how to choose an optimal Python CPU limit percentage:

The maximum CPU percentage usage that is accepted before the CPU gets hot depends on several factors, including the CPU model, its thermal design power (TDP), cooling system, and workload.

In general, most modern CPUs are designed to operate at 100% usage for extended periods without overheating, provided that the cooling system can keep the temperature within safe limits. However, sustained high CPU usage can increase the temperature of the CPU and the surrounding components, which can reduce their lifespan and cause stability issues.

To prevent overheating and ensure the longevity of the CPU, it is recommended to keep the temperature below its maximum operating temperature, which is typically specified by the CPU manufacturer. This temperature varies depending on the model and can range from 60 °C to 100 °C or higher.

In practical terms, if you notice that the temperature of your CPU is consistently above 80 °C or that your system is becoming unstable or unresponsive during high CPU usage, you may want to reduce the CPU load or optimize the cooling system to avoid damage to the hardware.

