Content
========

1. Installation

1.1. Set up your system repository sources

1.2. Update the system

1.3. Install Commbase

1.4. Set up your new app name and directory

1.5. Set up the HISTCONTROL environment variable

1.6. Set up the Commbase executable

2. Requisites and dependencies

2.1. Choose a Python version to install

2.2. Install Python

2.3. Install Python packages

2.4. Install Python in an Anaconda Python environment

2.5. Build the Commbase Conda environment from a YAML file

2.6. Install OpenAI's Whisper

2.7. Install the required system dependency packages

2.8. Install Oh My Tmux

3. Next steps

4. CPU Limit


1. Installation
================

In this document, we will use Debian GNU/Linux to demonstrate the installation steps, but you can use any of your preferred distros and have the same result.

Set up your system repository sources
--------------------------------------

Add the sources contrib and non-free in the file /etc/apt/sources

$ sudo nano /etc/apt/sources

Update the system
------------------

$ sudo apt-get update

You can also upgrade it like this:

$ sudo apt-get -u upgrade

Install Commbase
-----------------

Visit: https://github.com/mydroidandi/commbase

Download or clone the repository somewhere in your home directory:

$ cd $HOME

$ git clone git@github.com:mydroidandi/commbase.git

$ unzip commbase-main.zip

Set up your new app name and directory
---------------------------------------

Go to the directory scripts/configuration/ 

You will see the file set_app_root_directory_and_app_directory.sh there.

$ bash set_app_root_directory_and_app_directory.sh

The script prompts the user to enter the current location and name of the directory they want to rename, and also to enter a new name and location for the directory. It also appends the variable COMMBASE_APP_DIR in the files $HOME/.bashrc and $HOME/.zshrc

Notes about the difference between .bashrc and .bash_profile:

.bash_profile is read and executed when Bash is invoked as an interactive login shell, while .bashrc is executed as an interactive non-login shell.

When Bash is invoked as an interactive non-login shell, it reads and executes commands from ~/.bashrc, if that file exists, and is readable.

When invoked as an interactive login shell, Bash looks for the /etc/profile file, and if the file exists, it runs the commands listed in the file. Then Bash searches for ~/.bash_profile, ~/.bash_login, and ~/.profile files, in the listed order, and executes commands from the first readable file found.

In case of that your OS distribution does not use ~/.bashrc, add manually the variable $COMMBASE_APP_DIR and its value to your Bash Startup File(s).

Set up the HISTCONTROL environment variable
--------------------------------------------

The HISTCONTROL variable determines which commands are saved in the history file. If you set it to the value "ignoreboth", any command preceded by a space character will be excluded from the history.

Commbase uses HISTCONTROL to keep clean the commands' history during the rendering of the Commbase User Interface (UI).

To set up the HISTCONTROL environment variable, run the script scripts/configuration/append_function_no_history_to_bashrc.sh:

$ cd scripts/configuration

$ bash append_function_no_history_to_bashrc.sh

$ source append_function_no_history_to_bashrc.sh

$ exit

Reopen the terminal.

Note: Do not confuse this history file .bash_history with the file history/.app_history that is mentioned in the document User's Guide.

Set up the Commbase executable
-------------------------------

Go to the directory scripts/configuration/install_commbase_executable/ and execute the file install_commbase_executable.sh:

$ cd scripts/configuration/install_commbase_executable/

$ sudo bash install_commbase_executable.sh

A new commbase file should appear in the directory /usr/bin.

$ ls /usr/bin/commbase

Do not run the commbase just command yet. Remember that the command commbase opens an enhanced tmux session named Commbase-0. To avoid duplicate instances of Commbase running on the system, you need to completely close the program before rerunning it once more. Check out the User's Guide for more details regarding this topic.


2. Requisites and dependencies
===============================

Choose a Python version to install
-----------------------------------

In the next documentation sections, we present 3 alternatives to install the Commbase Python Environment:

1. Install Python, Install Python packages.

2. Install Python in an Anaconda Python environment.

3. Build the Commbase Conda environment from a YAML file.

From those alternatives, we recommend installing Python using the third option, Build the Commbase Conda environment from a YAML file, because there is no need to create a new Commbase environment from zero, in case of systems with multiple environments setups. You recreate and install the Commbase environment, packages, and packaging dependencies all at once. Also, you do not need to edit the file config/commbase.conf constant PYTHON_ENV_VERSION="python" to define your own or custom Python version that Commbase is going to use.

For the second and third alternatives given, in case you do not have Anaconda Python in your system but still want to use it to run Commbase, you can install Anaconda Python and then read the section "Install Python in an Anaconda Python environment" to choose if you are going to create any Anaconda Python Commbase environment such as "commbase_env" yourself or build it later on as it is shown in the section "Build the Commbase Conda environment from a YAML file". After its installation, your Anaconda Python version should be capable of installing or building your commbase_env environment. Otherwise, try to install a newer or older version of Anaconda Python and verify the Python versions it can install, run, and work with. The installation of Anaconda Python is beyond the scope of this documentation. For information on how to install Anaconda Python in your operating system, visit: https://docs.anaconda.com/free/anaconda/getting-started/install/

For the first alternative, in case you want to use your systems' or any other custom Python version, edit the file config/commbase.conf line with the variable PYTHON_ENV_VERSION="python" if required.

For example:

PYTHON_ENV_VERSION="python3.12"

In that way, Commbase will attempt to run using python3.12 from your OS instead of using the Anaconda Python environment commbase_env, which has and runs its own Python version.

Python 3.12 is the minimum Python version required to run all the Commbase software properly, in the system or in a virtual environment. A Python version higher than the one used in commbase_env could affect any skill script or any custom scripts you could make. In such cases, you could keep your custom Python version or Python environment version and manage the errors by yourself.

Install Python
---------------

In this section, we added an excellent alternative to standard Python installations. However, the method to install Python is your decision at the end of the day, and that choice is not going to affect how Commbase works. After the alternative "Build Python 3.12.1 on Debian 12 Bookworm", we put a subsection "Install Python 3.7" just for reference of installations of older Python versions on an older Debian GNU/Linux distribution.

- Build Python 3.12.1 on Debian 11, 12:

Check the current version:

$ apt info python3

Info: https://www.python.org/downloads/release/python-3121/

Download and extract the Python source code:

$ cd /tmp/

$ wget https://www.python.org/ftp/python/3.12.1/Python-3.12.1.tgz

$ tar -xzvf Python-3.12.1.tgz

$ cd Python-3.12.1/

Install the build tools:

$ sudo apt update

$ sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev

If you are prompted to install other dependencies, select yes.

Configure, make and make install:

$ ./configure --enable-optimizations

Run make. You can make the build using nproc, which returns the number of CPUs.

$ make -j `nproc`

Make install.

The default Python installation is /usr/bin. If you want to install Python under /usr/local/bin instead of overwriting the default, do this:

$ sudo make altinstall

This will install Python at /usr/local/bin/python3.12. To test the version, run this:

$ python3.12 -V

You will get this output:

Python 3.12.1

Make Python 3.12.1 the default version.

To make the default version of Python 3.12.1, run this:

$ sudo ln -s /usr/local/bin/python

Output:

ln: failed to create symbolic link './python': File exists

$ sudo ln -s /usr/local/bin/python3.12 /usr/local/bin/python

This creates a bunch of softlinks and links the latest Python to /usr/local/bin.

Test whether Python 3.12.1 is the default version:

$ ls -al /usr/local/bin/python

Output:

lrwxrwxrwx 1 root root 25 May 11 16:52 /usr/local/bin/python -> /usr/local/bin/python3.12

$ ls -al /etc/alternatives/python

Output:

ls: cannot access '/etc/alternatives/python': No such file or directory

$ /usr/local/bin/python3.12 -V

Output:

Python 3.12.1

$ python -V

The output will be:

Python 3.12.1

So, at this point, Python 3.12.1 has been set as the default version of Python.

Verify the pip version:

$ pip -V

Output:

[...] (python 3.9)

Upgrade the pip version:

$ whereis python

$ /usr/local/bin/python3.12 -m pip install --upgrade pip

$ pip3.12 install --upgrade pip

$  whereis pip

Check the new pip version:

$ pip3.12 -V

Output:

pip: /usr/bin/pip /usr/local/bin/pip3.12 /usr/share/man/man1/pip.1.gz

From now on, you can use this new command pip3.12 to install most of your pip packages.

The command python -m pip install <PACKAGE> is used to ensure that the pip command is executed within the context of the specific Python interpreter specified by python.

In some cases, there may be multiple versions of Python installed on a system, and using python -m pip helps ensure that the correct pip module associated with the desired Python interpreter is used for package installation. This is particularly useful when you want to install packages for a specific Python version or in virtual environments.

- Install Python 3.7:

$ whereis python3.7

$ sudo apt-get update

$ apt-cache search python 3.7

$ sudo apt-get install python3.7

pip3.7:

$ /usr/bin/python3 -m pip install --upgrade pip

$ /usr/bin/python3.7 -m pip install --upgrade pip

Prints a list of installed pip packages:

$ pip list | more

$ pip3 list | more

$ pip3.7 list | more

Install many pip versions will allow you to choose a package version using the pip version. For example:

$ pip install subprocess.run

Or:

$ pip3 install subprocess.run

Install Python packages
------------------------

- Portaudio:

PyAudio requires Portaudio19 to install:

More information here: https://packages.debian.org/bullseye/portaudio19-dev

$ sudo apt-get update

$ apt-cache search portaudio

$ sudo apt-get install portaudio19-dev portaudio19-doc

- PyAudio:

PyAudio requires python3-pyaudio to install:

$ sudo apt install python3-pyaudio

More information here: https://pypi.org/project/PyAudio/

$ pip3.12 install pyaudio

- Subprocess.run:

More information here: https://pypi.org/project/subprocess.run/

$ pip3.12 install subprocess.run

- Sounddevice:

This package allows us to run test_microphone.py

$ pip3.12 install sounddevice

- Chardet:

$ pip3.12 install chardet

- Scikit-learn and scikit-learn-intelex (this last is optional):

$ pip3.12 install scikit-learn scikit-learn-intelex

- OpenCV:

It must be installed as Python package and also as a system package.

To install the Python OpenCV package:

$ pip3.12 install opencv-python

Steps to install OpenCV in Debian 11, 12:

Verify the current Debian version (The version limits the higher version that you can install of any package name):

$ cat /etc/issue

Verify the current Python version:

$ python -V

Update the sources list for the official Debian repos:

$ sudo apt-get update

Search the package in the official Debian repos (main):

$ apt-cache search opencv

Show the package version information:

$ apt-cache show python3-opencv

Install the package:

$ sudo apt-get install python3-opencv

Verify the package installation:

$ dpkg -l | grep opencv

- openai:

$ pip3.12 install openai

- aiohttp-cors

$ pip3.12 install aiohttp-cors

- typer:

$ pip3.12 install typer

- rich:

$ pip3.12 install rich

- cchardet:

This is giving an error and was installed using pip3 instead of pip3.12, as follows:

$ pip3 install cchardet

- SpeechRecognition:

$ pip3.12 install SpeechRecognition

- ffmpeg:

$ pip3.12 install ffmpeg

It requires the package ffmpeg. Install it like this:

$ sudo apt-get install ffmpeg

- flask:

$ pip3.12 install flask

- flask-cors:

$ pip3.12 install flask-cors

- flask-socketio:

$ pip3.12 install flask-socketio

- requests:

$ pip3.12 install requests

- simple-websocket:

$ pip3.12 install simple-websocket

- schedule:

$ pip3.12 install schedule

- pyttsx3:

$ pip3.12 install pyttsx3

- pydub:

$ pip3.12 install pydub

It requires the packages ffmpeg and python3-pydub. Install python3-pydub like this:

$ sudo apt-get install python3-pydub

- pytesseract:

$ pip3.12 install pytesseract

It requires the package tesseract-ocr. Install it like this:

$ sudo apt-get install tesseract-ocr

- pytest:

$ pip3.12 install pytest

Install Python in an Anaconda Python environment
-------------------------------------------------

Alternatively, you can replace Python 3.12 with Anaconda Python. Anaconda Python includes some well-optimized Python packages, so the speech recognition AI is supposed to work faster with Anaconda Python than with the official running Python, but everything depends on many factors, such as package versions and system resource availability.

More information on Anaconda: https://www.anaconda.com/

After the installation of Anaconda Python, you should see the string "(base)" in the foobar.

In case your system has a single Python installation using Anaconda Python if it is set up for running only in the Bash shell, you must enter the Bash shell before starting Commbase, starting anaconda-navigator, or starting any other Python script/program incapable of starting with the current Python's runtime that is preinstalled within your Operating System distribution:

Example of foobar before entering Bash:

USER-NAME@HOSTNAME:~$ bash

Example of foobar with Anaconda Python, identified by the string "(base)", after entering Bash:

(base) USER-NAME@shark:~$

To install PyPi-like packages in the (base) in Anaconda Python, use the command "conda":

(base) USER-NAME@HOSTNAME:~$ conda install PACKAGE-NAME

If you want to create a new Anaconda Python (3.12.1) environment just for Commbase, you can use the default name commbase_env or customize it in the configuration file config/commbase.conf:

CONDA_ENV_NAME_IF_EXISTS="commbase_env"

To create the environment using the default name commbase_env do:

$ conda create -n commbase_env python=3.12.1

$ conda activate commbase_env

Now, (commbase_env) appears in the foobar.

Within the Anaconda Python environment "commbase_env" you can install Conda packages, instead of, for example, pip packages. Examples:

Install OpenCV version 4.6.0 whether available from the defaults channel to a particular Anaconda Python environment:

(commbase_env) $ conda install -c defaults opencv=4.6.0

Install the latest version of OpenCV, available from the conda-forge channel:

(commbase_env) $ conda conda-forge -c defaults opencv

Alternatively, to install PyPi-like packages in the (commbase_env) environment in Anaconda Python, use the command "pip", for example:

(commbase_env) $ pip install ipython

To verify the package was installed, in your terminal window or an Anaconda Python prompt, run:

(commbase_env) $ conda list | more

(commbase_env) $ conda list | grep ipython

Note: This documentation and Commbase code would be updated for future releases of Python to make everything Commbase compatible.

To deactivate the current environment and go back to (base) use:

(commbase_env) $ conda deactivate

To deactivate any environment, use "deactivate" from another environment:

(base) $ conda deactivate commbase_env

$ conda deactivate base

Verify the Anaconda Python's Python version used:

(base) $ python --version

Build the Commbase Conda environment from a YAML file
------------------------------------------------------

Using YAML files is the simplest and probably the best way to install Python and the Python Commbase environment dependencies.
To simplify it even more, we put all together in a script you can run once.

If you want to remove a previous Commbase environment, if the environment you want to remove is the current active environment, deactivate it before running the script.

(commbase_env) $ conda deactivate

Run the config script:

$ bash scripts/configuration/build_conda_environment.sh

The script will remove any existent environment called commbase_env, recreate it and install it from the beginning using the file commbase_env.yaml in one step.

If your installation gets stuck when it is time to install the group of packages using pip (conda pip), do the following:

Press Ctrl + c to exit the installation. You will see a message like:

Installing pip dependencies: | failed

Preserve the portion of the environment packages already installed.

Verify the current status of the packages list:

$ conda activate commbase_env

Verify that there are conda packages but there are not pypi packages in the column that corresponds to the channel pypi.

$ conda list

$ conda list | grep pypi

Proceed to install OpenAI Whisper by following the steps of "To install Whisper for the Anaconda Python environment commbase_env:" in the section Install OpenAI's Whisper of this document.

Verify that Whisper is installed properly.

$ conda list | grep openai-whisper

Install the rest pip packages, manually, from the commmbase_env environment.

$ pip install daal
$ pip install daal4py
$ pip install opencv-python
$ pip install packaging
$ pip install pillow
$ pip install pyaudio
$ pip install pydub
$ pip install pytesseract
$ pip install pyttsx3
$ pip install schedule
$ pip install scikit-learn-intelex
$ pip install simple-websocket
$ pip install sounddevice
$ pip install speechrecognition
$ pip install subprocess-run
$ pip install tbb
$ pip install wsproto

Verify the new installed pypi packages in the conda environment:

$ conda list | grep pypi

And to count packages, you can use:

$ conda list | grep pypi | wc -l

$ conda list | wc -l

Install OpenAI's Whisper
-------------------------

Install Whisper using a specific Git version tag. Replace <tag_name> with the actual tag name in git+https://github.com/openai/whisper.git@<tag_name>.

To install Whisper for Python:

$ pip3.12 install git+https://github.com/openai/whisper.git@v20231117

If you have already installed Whisper for Python, but want to change to the Anaconda Python environment alternative, uninstall Whisper for Python and then then install it for the Anaconda environment:

$ pip3.12 list | grep  openai-whisper

$ pip3.12 uninstall openai-whisper

To install Whisper for the Anaconda Python environment commbase_env:

In an Anaconda Python environment, Whisper must be installed from its GitHub repository using pip. It should not be installed from the default Anaconda channel or the Python Package Index (PyPI, the Cheese Shop). This should be done after recreating the Commbase environment.

First, uninstall Whisper from the Anaconda Python's environment (this is just to remove the package listed in the commbase_env.yaml that comes with Commbase):

$ conda activate commbase_env

(commbase_env) $ conda uninstall openai-whisper

This will properly handle dependencies and remove the package along with its dependencies managed by Conda.

If you use 'pip uninstall package', it might not be aware of the dependencies managed by Conda, and you could potentially leave behind orphaned files or dependencies.

To maintain consistency and avoid potential issues, it's best to stick with the package manager used for installation when uninstalling.

Second, verify the list of packages in the Commbase environment file:

(commbase_env) $ cat commbase_env.yaml | grep whisper

Or use:

(commbase_env) $ conda list | grep openai-whisper

Third, install Whisper using the conda pip.

(commbase_env) $ pip install git+https://github.com/openai/whisper.git@v20231117

Install the required system dependency packages
------------------------------------------------

The names of the packages or the names of the commands mentioned in this section could change from OS distribution to distribution, or even from release to release.

In Debian, the DPKG packages that contain all the required commands can be installed using APT. APT manages and installs the package dependencies automatically.

List of required packages/commands:

- alsa-utils:

It contains the tools alsamixer and aplay.

- bash.

- cpulimit.

- curl.

- dash:

It contains the sh command.

- espeak:

It is an alternative to festival.

- festival.

- ffmpeg.

- figlet.

- gawk.

- gdebi.

- gnome-terminal:

Actually, it can be any of these Linux terminals: gnome-terminal, konsole, lxterminal, kitty, alacritty, wezterm, xterm, lxterm.

Note: More terminals can be added in the file src/client_skill.sh.

- git.

- jq.

- mpv.

- mplayer.

- nmap.

- openssh-client.

- openssh-server.

- openssl.

- portaudio19-dev:

It is seen in the section of PyAudio.

- procps.

It includes the command pkill.

- pulseaudio:

Some Linux configurations, such as the Gnome desktop environment, currently use Pipewire instead of PulseAudio by default. Commbase can normally be used with Pipewire or PulseAudio or both.

Install pulseaudio. This is required to have pactl available:

$ sudo apt-get install pulseaudio

pactl, which is the command-line interface for the PulseAudio sound server, can typically interact with devices managed by PipeWire. This interoperability is because PipeWire is designed to be compatible with PulseAudio APIs and commands, allowing tools like pactl to work with both PulseAudio and PipeWire.

However, it's essential to note that while pactl can often interact with PipeWire devices, there might be some limitations or differences in behavior compared to using it with PulseAudio directly.

In case you want to use Pipewire instead of PulseAudio, install Pipewire like this:

$ sudo apt-get install pipewire

You can have both PulseAudio and PipeWire installed on the same system. They can coexist, and you can choose which one to use as the default audio server based on your preferences or requirements.

If you want PipeWire to work with applications that rely on PulseAudio, you may want to install the PulseAudio compatibility layer for PipeWire:

$ sudo apt-get install pipewire-pulse

To determine whether your system is using PipeWire or PulseAudio:

$ pactl info | grep "Server Name"

To determine whether your system is using PipeWire or ALSA as the default audio server, you can check the status of the PipeWire service and ALSA Mixer.

For PipeWire, you can check if the PipeWire service is running:

$ systemctl --user restart pipewire

$ systemctl --user status pipewire

If the service is not working yet, this could require a system reboot.

$ systemctl reboot

For ALSA, you can check the status of the ALSA service or mixer. Note that ALSA doesn't have a centralized service like PipeWire or PulseAudio, but you can check the status of ALSA services or utilities:

$ sudo alsactl restore

This command restores the settings of the ALSA soundcard.

Additionally, you can check the ALSA Mixer settings:

$ alsamixer

- python3-opencv:

It is seen in the installation of OpenCV.

- rsync.

- sed.

- sox:

It includes the command play.

- sudo

- tar.

- tasksel:

Debian specific, optional.

- tesseract-ocr.

- tmux.

- unzip.

- uuid-runtime.

- wget.

- xbindkeys:

It is similar to xmodmap.

Install these packages from the official repositories for your distro. In summary, for Debian it would be like this:

$ sudo apt-get update; sudo apt-get install alsa-utils bash cpulimit curl dash espeak festival ffmpeg figlet gawk gdebi git jq mpv mplayer nmap openssh-client openssh-server openssl portaudio19-dev procps pulseaudio python3-opencv rsync sed sox sudo tar tasksel tesseract-ocr tmux unzip uuid-runtime wget xbindkeys

$ sudo apt-get install pipewire pipewire-pulse

$ sudo apt-get install gnome-terminal

Troubleshooting the package installation:

Packages unfound by their given names can be replaced in the source by their respective command line versions for your favorite OS distribution.

To verify that the command of a package is already in the system, type in the command and then press enter. For example:

$ awk

If you can list the command, it means that the application is installed.

If you want to know which alternative is currently set in case of meta-packages with more than one alternative, for example, awk:

$ update-alternatives --list awk

To change the alternative, use:

$ update-alternatives --config awk

Package Names and commands should be verified after the Commbase installation, during the Commbase configuration. To verify packages, you can use:

$ whereis <PACKAGE>

$ whereis <COMMAND>.

To verify that a package is present in the system:

$ dpkg -l | grep <PACKAGE-NAME>

Example:

$ dpkg -l | grep bash

To search for a particular package name or string in the official Debian repositories, considering that config file /etc/apt/sources.list includes the repositories "main", "contrib", and "non-free", use apt-cache, for example:

$ apt-cache search dash | grep "dash"

Install Oh My Tmux
-------------------

Clone it from GitHub and install it:

$ cd

$ git clone https://github.com/gpakosz/.tmux.git

$ ln -s -f .tmux/.tmux.conf

$ cp .tmux/.tmux.conf.local .


3. Next steps
==============

If everything went well, now you can run the next command in a terminal to start the program:

$ commbase start

At this point, Commbase will be ready to receive Commbase voice commands and Commbase terminal commands to assist you. However, the only command that works is "tell me about yourself".

Verify that the microphone is open and tell Commbase to introduce himself/herself.

Say: "tell me about yourself"

Optionally, type the command in the terminal:

$ commbase "tell me about yourself"

The output should be the Commbase introduction.

From here, you can program new custom skills to customize your voice assistant or to create J.A.R.V.I.S. from Iron Man.

Check out the document User's Guide in the directory docs/ for a complete list of options.


4. CPU limit
=============

Running Commbase can over stress the Central Process Unit (CPU) depending on your CPU and hardware.

You can verify the Commbase performance on your computer in many ways, for example, run top and verify the Python process row:

$ top

Press 'q' to exit.

If you experience problems with the engine commbase_stt_whisper_p performance when running Commbase, you can yet change the value of the variable STT_PROCESS_CPU_LIMIT_PERCENTAGE in the file config/commbase.conf to a higher value. Usually 1 - 100, but can be higher than 400 on multicore CPUs.

Considerations on how to choose an optimal Python CPU limit percentage:

The maximum CPU percentage usage that is accepted before the CPU gets hot depends on several factors, including the CPU model, its thermal design power (TDP), cooling system, and workload.

In general, most modern CPUs are designed to operate at 100% usage for extended periods without overheating, provided that the cooling system can keep the temperature within safe limits. However, sustained high CPU usage can increase the temperature of the CPU and the surrounding components, which can reduce their lifespan and cause stability issues.

To prevent overheating and ensure the longevity of the CPU, it is recommended to keep the temperature below its maximum operating temperature, which is typically specified by the CPU manufacturer. This temperature varies depending on the model and can range from 60 °C to 100 °C or higher.

In practical terms, if you notice that the temperature of your CPU is consistently above 80 °C or that your system is becoming unstable or unresponsive during high CPU usage, you may want to reduce the CPU load or optimize the cooling system to avoid damage to the hardware.
